---
import PortfolioImage from "../assets/portfoliosite.png";
import "@fontsource/roboto-slab";
import "@fontsource/roboto/900.css";
import "@fontsource/roboto/700.css";
import "@fontsource/roboto";
import Background from "../components/Background.astro";

export interface Props {
    title: string;
}

const { title } = Astro.props;
---

<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width" />
        <meta
            name="description"
            content="Joshua Maciel's Full Stack Software Developer Portfolio to be shared with the world."
        />
        <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
        <meta name="generator" content={Astro.generator} />
        <meta property="og:image" content={PortfolioImage} />
        <title>{title}</title>
    </head>
    <body>
        <Background />
        <slot />
    </body>
</html>

<style is:global>
    * {
        padding: 0;
        margin: 0;
        box-sizing: border-box;
    }

    :root {
        --accent: 124, 58, 237;
        --background-gradient: linear-gradient(
            45deg,
            #111111,
            rgb(4, 5, 27),
            #111111
        );
        --accent-gradient: linear-gradient(350deg, #d134b7 15%, #787ff4 80%);
    }

    html {
        font-family: "Roboto Slab", system-ui, serif;
    }

    h1,
    h2,
    h3 {
        font-family: "Roboto", sans-serif;
        font-weight: 900;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
    }

    button {
        font-family: "Roboto", sans-serif;
        font-weight: 700;
    }

    textarea,
    input {
        font-family: "Roboto", sans-serif;
        font-weight: 500;
    }

    @media (max-width: 600px) {
        html {
            font-size: 1.2rem;
        }
    }

    code {
        font-family: Menlo, Monaco, Lucida Console, Liberation Mono,
            DejaVu Sans Mono, Bitstream Vera Sans Mono, Courier New, monospace;
    }

    body {
        display: flex;
        background-color: #111;
        overflow-x: hidden;
        overflow-y: auto;
    }

    main {
        background: var(--background-gradient);
        min-height: 100vh;
        background-size: cover;
        color: #bdcad9;
        width: 1100px;
        display: flex;
        flex-direction: column;
        margin: auto;
        border-left: 1px solid #292929;
        border-right: 1px solid #292929;
        z-index: 4;
    }
    .container {
        padding: 1.5rem;
    }
    @media (max-width: 1100px) {
        main {
            background: rgb(4, 5, 27);
        }
    }

    .hidden {
        opacity: 0;
        transition: all 600ms ease;
        transform-style: preserve-3d;
        /* filter: blur(3px); */
        /* transform: translateX(-100%); */
        /* transform-origin: left; */
    }

    .hidden-left {
        transform: translateX(-100%);
    }

    .hidden-right {
        transform: translateX(100%);
    }

    .show {
        opacity: 1;
        /* filter: blur(0); */
        transform: translateX(0);
    }

    @media (prefers-reduced-motion) {
        .hidden {
            transition: none;
        }
    }
</style>

<script>
    const observer = new IntersectionObserver((entries) => {
        entries.forEach((entry) => {
            if (entry.isIntersecting) {
                entry.target.classList.add("show");
            } else {
                entry.target.classList.remove("show");
            }
        });
    });

    const hiddenElements = document.querySelectorAll(".hidden");

    hiddenElements.forEach((el) => observer.observe(el));
</script>
